// frontend/src/app/page.tsx
'use client'

import { useState, useRef } from 'react'
import { MessageCircle, Upload, BarChart3, TrendingUp, Users, Calculator } from 'lucide-react'

interface Message {
  id: string
  type: 'user' | 'assistant'
  content: string
  data?: any
  timestamp: Date
}

interface AnalysisResult {
  analysis_type: string
  summary: string
  data: any[]
  visualization: any
  insights: string[]
}

export default function Home() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: "Hello! I'm your life insurance analytics assistant. I can help you analyze mortality experience, lapse rates, reserves, and profitability. Try asking me something like 'Show me our mortality A/E ratios' or 'What are our lapse trends?'",
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [uploadedFile, setUploadedFile] = useState<any>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsLoading(true)

    try {
      const response = await fetch('http://localhost:8000/api/query', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: inputValue })
      })

      const result: AnalysisResult = await response.json()

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: result.summary,
        data: result,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, assistantMessage])
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
^x
        content: "I'm sorry, I encountered an error processing your request. Please try again.",
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    }

    setIsLoading(false)
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    const formData = new FormData()
    formData.append('file', file)

    try {
      const response = await fetch('http://localhost:8000/api/upload', {
        method: 'POST',
        body: formData
      })

      const result = await response.json()
      setUploadedFile(result)

      const uploadMessage: Message = {
        id: Date.now().toString(),
        type: 'assistant',
        content: `Successfully uploaded ${result.filename}! I found ${result.rows} rows and ${result.columns} columns. You can now ask me questions about this data.`,
        data: result,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, uploadMessage])
    } catch (error) {
      console.error('Upload error:', error)
    }
  }

  const renderVisualization = (data: AnalysisResult) => {
    if (!data.data || data.data.length === 0) return null

    switch (data.analysis_type) {
      case 'mortality':
        return (
          <div className="mt-4 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-900 mb-3">Mortality A/E Analysis</h4>
            <div className="space-y-2">
              {data.data.map((item, index) => (
                <div key={index} className="flex justify-between items-center p-2 bg-white rounded">
                  <span className="font-medium">{item.product_type}</span>
                  <div className="text-right">
                    <div className="text-lg font-bold text-blue-600">
                      {(item.ae_ratio * 100).toFixed(1)}%
                    </div>
                    <div className="text-xs text-gray-500">
                      {item.death_occurred} deaths / {item.expected_deaths.toFixed(1)} expected
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'lapse':
        return (
          <div className="mt-4 p-4 bg-green-50 rounded-lg">
            <h4 className="font-semibold text-green-900 mb-3">Lapse Rate Analysis</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {data.data.slice(0, 9).map((item, index) => (
                <div key={index} className="p-3 bg-white rounded border">
                  <div className="text-sm text-gray-600">{item.product_type} - Year {item.policy_duration}</div>
                  <div className="text-xl font-bold text-green-600">
                    {(item.lapse_rate * 100).toFixed(1)}%
                  </div>
                  <div className="text-xs text-gray-500">
                    {item.lapses} / {item.exposures} policies
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'summary':
        const summary = data.data[0]
        return (
          <div className="mt-4 p-4 bg-purple-50 rounded-lg">
            <h4 className="font-semibold text-purple-900 mb-3">Portfolio Summary</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-white rounded">
                <Users className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                <div className="text-2xl font-bold">{summary.total_policies?.toLocaleString()}</div>
                <div className="text-sm text-gray-600">Total Policies</div>
              </div>
              <div className="text-center p-3 bg-white rounded">
                <TrendingUp className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                <div className="text-2xl font-bold">${(summary.total_face_amount / 1e9).toFixed(1)}B</div>
                <div className="text-sm text-gray-600">Face Amount</div>
              </div>
              <div className="text-center p-3 bg-white rounded">
                <Calculator className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                <div className="text-2xl font-bold">{summary.average_issue_age?.toFixed(0)}</div>
                <div className="text-sm text-gray-600">Avg Issue Age</div>
              </div>
              <div className="text-center p-3 bg-white rounded">
                <BarChart3 className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                <div className="text-2xl font-bold">{(summary.smoker_rate * 100).toFixed(1)}%</div>
                <div className="text-sm text-gray-600">Smoker Rate</div>
              </div>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  const quickQuestions = [
    "Show me mortality A/E ratios by product type",
    "What are our lapse trends by duration?",
    "Give me a portfolio summary",
    "Analyze mortality by age and gender",
    "Show reserve adequacy by product line"
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center">
              <BarChart3 className="h-8 w-8 text-blue-600 mr-3" />
              <h1 className="text-2xl font-bold text-gray-900">DataGenie Life Insurance</h1>
            </div>
            <div className="flex items-center space-x-4">
              <input
                ref={fileInputRef}
                type="file"
                accept=".csv,.xlsx,.xls"
                onChange={handleFileUpload}
                className="hidden"
              />
              <button
                onClick={() => fileInputRef.current?.click()}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Upload className="h-4 w-4 mr-2" />
                Upload Data
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          
          {/* Quick Actions Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4">Quick Questions</h3>
              <div className="space-y-2">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    onClick={() => setInputValue(question)}
                    className="w-full text-left p-3 text-sm bg-gray-50 hover:bg-blue-50 rounded-lg transition-colors"
                  >
                    {question}
                  </button>
                ))}
              </div>
              
              {uploadedFile && (
                <div className="mt-6 p-4 bg-green-50 rounded-lg">
                  <h4 className="font-medium text-green-900 mb-2">Uploaded File</h4>
                  <p className="text-sm text-green-700">{uploadedFile.filename}</p>
                  <p className="text-xs text-green-600">
                    {uploadedFile.rows} rows, {uploadedFile.columns} columns
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Chat Interface */}
          <div className="lg:col-span-3">
            <div className="bg-white rounded-lg shadow h-[600px] flex flex-col">
              
              {/* Messages Area */}
              <div className="flex-1 overflow-y-auto p-6 space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[80%] rounded-lg p-4 ${
                        message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}
                    >
                      <div className="whitespace-pre-wrap">{message.content}</div>
                      
                      {/* Render insights */}
                      {message.data?.insights && (
                        <div className="mt-3 space-y-1">
                          {message.data.insights.map((insight: string, index: number) => (
                            <div key={index} className="text-sm bg-black bg-opacity-10 rounded p-2">
                              💡 {insight}
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {/* Render visualization */}
                      {message.data && renderVisualization(message.data)}
                      
                      <div className="text-xs opacity-70 mt-2">
                        {message.timestamp.toLocaleTimeString()}
                      </div>
                    </div>
                  </div>
                ))}
                
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 rounded-lg p-4">
                      <div className="flex items-center space-x-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                        <span className="text-gray-600">Analyzing your data...</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Input Area */}
              <div className="border-t p-4">
                <div className="flex space-x-4">
                  <input
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="Ask me about mortality, lapse rates, reserves, or any life insurance analytics..."
                    className="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    disabled={isLoading}
                  />
                  <button
                    onClick={handleSendMessage}
                    disabled={isLoading || !inputValue.trim()}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
                  >
                    <MessageCircle className="h-4 w-4 mr-2" />
                    Send
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
